numbers
numfiles = suppressWarnings(as.numeric, basenames)
numfiles
# get basenames
basenames = lapply(dirs, basename)
numfiles = suppressWarnings(as.numeric, basenames)
numfiles
suppressWarnings(as.numeric, basenames)
numfiles = suppressWarnings(lapply(as.numeric, basenames))
numfiles = suppressWarnings(lapply(as.numeric, basenames))
# get basenames
basenames = lapply(dirs, basename)
numfiles = suppressWarnings(lapply(as.numeric, basenames))
lapply(as.numeric, basenames)
basenames
lapply(as.numeric, basenames)
numfiles = suppressWarnings(lapply(basenames, as.numeric))
numfiles
is.na(numfiles)
1 - is.na(numfiles)
use.dirs = 1 - is.na(numfiles)
dirs[use.dirs]
collectNodes <- function(clusters, directory){
# exclude parent
dirs = list.dirs(directory)[-1]
# get basenames
basenames = lapply(dirs, basename)
# find basenames that are numeric only
numfiles = suppressWarnings(lapply(basenames, as.numeric))
use.dirs = 1 - is.na(numfiles)
# mask list of directories
dirs = dirs[use.dirs]
# get the time stamp
times=lapply(dirs,function(x){
info = file.info(x)
t.str = strptime(info$ctime, "%Y-%m-%d %H:%M:%S")
floor(as.numeric(format(t.str, "%H")) +
as.numeric(format(t.str, "%M"))/60)
} )
# find which ones were created at the same time, in the cluster
dirs = dirs[which(times == unique(times)[unlist(lapply(unique(times), function(x) {
sum(times==x)==clusters
}))][[1]])]
# gather all csvs in dirs
csvs = unlist(lapply(dirs, function(x){dir(x, full.names=T, pattern=".csv+") }))
return(lapply(csvs, read.csv))
}
collectNodes(clusters, directory)
res.list <- do.call("rbind", res.list)
res.list <- data.frame(res.list)
res.list
roxygen2::roxygenise()
devtools::document()
rm(list = c("collectNodes"))
devtools::document()
save(inputs, file="data/inputs.RData")
print(inputs)
data(inputs)
inputs <- list(
lmb.threshold = 1.10,
as.type = 'asOF',
outcome.type = "ORDINAL",
multiarm.mode='CONFIDENCE-BASED',
num.per.block = c(1,1),
final.visit = 180,
ppm = rep(20, 300),
perpetual=FALSE,
resprate=resprate,
looks=c(500,1000,1500)
)
inputs
parlist <- getparlist(
looks=seq(500,1000,100),
perpetual=FALSE,
alloc.ratio=c(1,1),
num.per.block=c(1,1),
final.visit=0,
as.type="asOF",
multiarm.mode="CONFIDENCE-BASED",
lmb.threshold=0.10,
lmb.conf.thresh=0.9,
outcome.type='BINARY',
estimator.type='odds ratio',
resprate=c(0.3,0.5),
ppm=rep(15, 300))
inputs <- list(
looks=seq(500,1000,100),
perpetual=FALSE,
alloc.ratio=c(1,1),
num.per.block=c(1,1),
final.visit=0,
as.type="asOF",
multiarm.mode="CONFIDENCE-BASED",
lmb.threshold=0.10,
lmb.conf.thresh=0.9,
outcome.type='BINARY',
estimator.type='odds ratio',
resprate=c(0.3,0.5),
ppm=rep(15, 300))
inputs
save(inputs, file="data/inputs.RData")
parlist <- getparlist(
looks=seq(500,1000,100),
perpetual=FALSE,
alloc.ratio=c(1,1),
num.per.block=c(1,1),
final.visit=0,
as.type="asOF",
multiarm.mode="CONFIDENCE-BASED",
lmb.threshold=0.10,
lmb.conf.thresh=0.9,
outcome.type='BINARY',
estimator.type='odds ratio',
resprate=c(0.3,0.5),
ppm=rep(15, 300))
roxygen2::roxygenise()
devtools::document()
data(inputs)
inputs
data(inputs)
num.sims <- 4
conf <- lapply(1:num.sims, runSingleTrial, inputs=inputs,  save.plot=FALSE, print=FALSE, directory = '')
clusters <- 2
cl <- makeCluster(clusters)
directory <- tempdir()
res.list <- pblapply(1:num.sims, runSingleTrial, inputs=inputs, save.plot=FALSE, directory=directory, cl=cl)
stopCluster(cl)
# now collect the results from the two nodes
collectNodes(clusters, directory)
clusters
# exclude parent
dirs = list.dirs(directory)[-1]
dirs
# get basenames
basenames = lapply(dirs, basename)
# find basenames that are numeric only
numfiles = suppressWarnings(lapply(basenames, as.numeric))
use.dirs = 1 - is.na(numfiles)
# mask list of directories
dirs = dirs[use.dirs]
dirs
# get the time stamp
times=lapply(dirs,function(x){
info = file.info(x)
t.str = strptime(info$ctime, "%Y-%m-%d %H:%M:%S")
floor(as.numeric(format(t.str, "%H")) +
as.numeric(format(t.str, "%M"))/60)
} )
times
x <- dirs[1]
x
info = file.info(x)
t.str = strptime(info$ctime, "%Y-%m-%d %H:%M:%S")
floor(as.numeric(format(t.str, "%H")) +
as.numeric(format(t.str, "%M"))/60)
t.str
as.numeric(format(t.str, "%H"))
as.numeric(format(t.str, "%M"))
floor(as.numeric(format(t.str, "%H")) +
as.numeric(format(t.str, "%M"))
usethis::use_vignette("running-simulations-in-parallel")
library(confidenceSim)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(confidenceSim)
usethis::use_testthat()
directory <- tempdir()
directory
res <- runSingleTrial(input=inputs, save.plot=FALSE, print=TRUE, directory = directory)
inputs
log(0.1)
log(1.1)
log(-0.95)
log(0.95)
inputs<- list(
#' looks=seq(500,1000,100),
#' perpetual=FALSE,
#' alloc.ratio=c(1,1),
#' num.per.block=c(1,1),
#' final.visit=0,
#' as.type="asOF",
#' multiarm.mode="CONFIDENCE-BASED",
#' lmb.threshold=0.95,
#' lmb.conf.thresh=0.9,
#' outcome.type='BINARY',
#' estimator.type='odds ratio',
#' resprate=c(0.3,0.5),
#' ppm=rep(15, 300))
inputs <- list(
looks=seq(500,1000,100),
perpetual=FALSE,
alloc.ratio=c(1,1),
num.per.block=c(1,1),
final.visit=0,
as.type="asOF",
multiarm.mode="CONFIDENCE-BASED",
lmb.threshold=0.95,
lmb.conf.thresh=0.9,
outcome.type='BINARY',
estimator.type='odds ratio',
resprate=c(0.3,0.5),
ppm=rep(15, 300))
save(inputs, file="data/inputs.RData")
roxygen2::roxygenise()
devtools::document()
data(inputs)
inputs
runSingleTrial(input=inputs, save.plot=FALSE, print=TRUE, directory = directory)
Sys.getpid()
inputs$special
inputs
data(inputs)
inputs$specia;
inputs
runSingleTrial(input=inputs, save.plot=FALSE, print=TRUE, directory = directory)
library(confidenceSim)
runSingleTrial(input=inputs, save.plot=FALSE, print=TRUE, directory = directory)
directory <- tempdir()
res <- runSingleTrial(input=inputs, save.plot=FALSE, print=TRUE, directory = directory)
res
directory <- tempdir()
res <- runSingleTrial(input=inputs, save.plot=FALSE, print=TRUE, directory = directory)
runSingleTrial(input=inputs, save.plot=FALSE, print=TRUE, directory = directory)
library(confidenceSim)
runSingleTrial(input=inputs, save.plot=FALSE, print=TRUE, directory = directory)
data(inputs)
inputs
special = paste0(0.5, '_', 0.6)
special
inputs$special = special
inputs
save(inputs, file="data/inputs.RData")
data(inputs)
inputs
devtools::document
devtools::document()
library(confidenceSim)
inputs
data(inputs)
inputs
# make sure there is a slash
if ((! endsWith(directory, "/")) & (! endsWith(directory, "\\"))){
directory = paste0(directory, "/")
}
error_log <- paste0(directory, "error_log.txt")
# make sure it exists
# Ensure the log file exists
if (!file.exists(error_log)) {
file.create(error_log)
}
print <- FALSE
save.plot <- TRUE
clusterExport(cl, varlist = c("runSingleTrial", "inputs", "directory", "print", "save.plot", "error_log"))
library(dplyr)
library(parallel)
library(pbapply)
set.seed(613)
# load data
data(inputs)
# create temporary directory
directory <- tempdir()
res <- runSingleTrial(input=inputs, save.plot=FALSE, print=TRUE, directory = directory)
clusters <- 2
cl <- makeCluster(clusters)
num.sims <- 4
res.list <- pblapply(1:num.sims, runSingleTrial, inputs=inputs, save.plot=FALSE, directory=directory, cl=cl)
# make sure there is a slash
if ((! endsWith(directory, "/")) & (! endsWith(directory, "\\"))){
directory = paste0(directory, "/")
}
error_log <- paste0(directory, "error_log.txt")
# make sure it exists
# Ensure the log file exists
if (!file.exists(error_log)) {
file.create(error_log)
}
print <- FALSE
save.plot <- TRUE
clusterExport(cl, varlist = c("runSingleTrial", "inputs", "directory", "print", "save.plot", "error_log"))
res.list <- pblapply(1:num.sims, function(i) {
tryCatch(
runSingleTrial(i, inputs=inputs, save.plot=save.plot, directory=directory, print=print),
error = function(e) {
# Append error message to the log file
message <- paste(Sys.time(), " - Error in simulation ", i, " for effect ",
inputs$special, ": ", e$message, "\n")
cat(message, file = error_log,
append = TRUE)
NULL  # Optional: return NULL after logging
}
)
}, cl=cl)
error_log
read.csv(error_log)
inputs$special
directore
directory
list.dirs(directory)
directory <- tempdir()
directory
unlink(tempdir(), recursive = TRUE)
directory <- tempdir()
directory
files <- list.files(tmp_dir, full.names = T, pattern = "^file")
files <- list.files(directory, full.names = T, pattern = "^file")
files
files <- list.files(directory, full.names = T, pattern = "^")
files
files <- list.files(directory, full.names = T)
files
directory
dirs
list.dirs(directory)
list.dirs(directory)
directory
```
## 2. Initiate cluster
For this example we will run across two clusters.
```
```
print
cl
directory
list.dirs(directory)
# load data
data(inputs)
# create temporary directory
directory <- tempdir()
res <- runSingleTrial(input=inputs, save.plot=FALSE, print=TRUE, directory = directory)
{r setup}
library(confidenceSim)
library(dplyr)
library(parallel)
library(pbapply)
set.seed(613)
data(inputs)
# create temporary directory
directory <- tempdir()
res <- runSingleTrial(input=inputs, save.plot=FALSE, print=TRUE, directory = directory)
directory
clusters <- 2
cl <- makeCluster(clusters)
num.sims <- 4
res.list <- pblapply(1:num.sims, runSingleTrial, inputs=inputs, save.plot=FALSE, directory=directory, cl=cl)
# make sure there is a slash
if ((! endsWith(directory, "/")) & (! endsWith(directory, "\\"))){
directory = paste0(directory, "/")
}
error_log <- paste0(directory, "error_log.txt")
# make sure it exists
# Ensure the log file exists
if (!file.exists(error_log)) {
file.create(error_log)
}
print <- FALSE
save.plot <- TRUE
clusterExport(cl, varlist = c("runSingleTrial", "inputs", "directory", "print", "save.plot", "error_log"))
res.list <- pblapply(1:num.sims, function(i) {
tryCatch(
runSingleTrial(i, inputs=inputs, save.plot=save.plot, directory=directory, print=print),
error = function(e) {
# Append error message to the log file
message <- paste(Sys.time(), " - Error in simulation ", i, " for effect ",
inputs$special, ": ", e$message, "\n")
cat(message, file = error_log,
append = TRUE)
NULL  # Optional: return NULL after logging
}
)
}, cl=cl)
stopCluster(cl)
list.dirs(directory)
list.files("C:\\Users\\FWERDI~1\\AppData\\Local\\Temp\\RtmpSiC5EC/19556")
list.files( "C:\\Users\\FWERDI~1\\AppData\\Local\\Temp\\RtmpSiC5EC/11880")
dirs = list.dirs(directory)[-1]
dirs
basenames = lapply(dirs, basename)
# find basenames that are numeric only
numfiles = suppressWarnings(lapply(basenames, as.numeric))
use.dirs = 1 - is.na(numfiles)
# mask list of directories
dirs = dirs[use.dirs]
dirs
devtools::check()
confidenceSim::getparlist(inputs=inputs)
data(inputs)
confidenceSim::getparlist(inputs=inputs)
do.call("confidenceSim::getparlist", inputs=inputs)
parlist <- do.call("confidenceSim::getparlist", inputs)
parlist <- do.call("getparlist", inputs)
parlist
usethis::use_package("tidyverse", min_version = T)
usethis::use_package("dplyr", min_version = T)
usethis::use_package("pbapply", min_version = T)
devtools::check()
parlist <- confidenceSim::getparlist(
looks=seq(500,1000,100),
perpetual=FALSE,
alloc.ratio=c(1,1),
num.per.block=c(1,1),
final.visit=0,
as.type="asOF",
multiarm.mode="CONFIDENCE-BASED",
lmb.threshold=0.95,
lmb.conf.thresh=0.9,
outcome.type='BINARY',
estimator.type='odds ratio',
resprate=c(0.3,0.5),
ppm=rep(15, 300))
testthat::expect_equal(parlist$num.looks, 3)
testthat::expect_equal(parlist$num.looks, 6)
library(confidenceSim)
devtools::check()
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
parlist <- confidenceSim::getparlist(
looks=seq(500,1000,100),
perpetual=FALSE,
alloc.ratio=c(1,1),
num.per.block=c(1,1),
final.visit=0,
as.type="asOF",
multiarm.mode="CONFIDENCE-BASED",
lmb.threshold=0.95,
lmb.conf.thresh=0.9,
outcome.type='BINARY',
estimator.type='odds ratio',
resprate=c(0.3,0.5),
ppm=rep(15, 300))
looks <- parlist$num.looks
testthat::expect_equal(look, 6)
testthat::expect_equal(looks, 6)
library(confidenceSim)
devtools::check()
devtools::test()
library(confidenceSim)
load(inputs)
drectory = tempdir()
res <- runSingleTrial(inputs=inputs, print=FALSE, save.plot = FALSE, directory = directory)
testthat::expect_equal(length(res), 17)
load(inputs)
data(inputs)
drectory = tempdir()
res <- runSingleTrial(inputs=inputs, print=FALSE, save.plot = FALSE, directory = directory)
testthat::expect_equal(length(res), 17)
library(confidenceSim)
devtools::test()
update.packages("testthat")
install.packages("testthat")
devtools::check()
library(confidenceSim)
directory = ''
is.null(directory)
directory != ''
directory == ''
devtools::document()
library(confidenceSim)
inputs <- list(
outcome.type = "BINARY", # binary outcome data
estimator.type = 'risk diff', # primary outcome is risk difference
lmb.threshold = 0.1, # risk difference < 0.1 lacks meaningful benefit
multiarm.mode='MONITOR FUTILITY', # only monitor for futility
alpha = 0.0125, # fixed alpha threshold to determine treatment efficacy
alloc.ratio = c(1,1), # allocation ratio
num.per.block = c(1,1), # number per block for blocked allocation
final.visit = 0, # time in days after which follow-up data becomes available
ppm = rep(25, 15), # patients accrued each month for the entire trial period.
looks = c(107, 214), # number of patients accrued at each look time, nmax = 214.
perpetual=FALSE, # not a perpetual trial.
resprate =  c(0.5, 0.6), # response rate for each arm
lmb.conf.thres=0.95, # treatment arm is futility is the confidence in LMB is greater than 0.95
special = paste0(0.5, '_', 0.6) # passing the response rates to special to add to the output
)
# run a single simulation with these settings
conf <- runSingleTrial(input=inputs, save.plot=FALSE, print=FALSE, save.text = FALSE)
library(confidenceSim)
devtools::document()
roxygen2::roxygenise()
inputs <- list(
outcome.type = "BINARY", # binary outcome data
estimator.type = 'risk diff', # primary outcome is risk difference
lmb.threshold = 0.1, # risk difference < 0.1 lacks meaningful benefit
multiarm.mode='MONITOR FUTILITY', # only monitor for futility
alpha = 0.0125, # fixed alpha threshold to determine treatment efficacy
alloc.ratio = c(1,1), # allocation ratio
num.per.block = c(1,1), # number per block for blocked allocation
final.visit = 0, # time in days after which follow-up data becomes available
ppm = rep(25, 15), # patients accrued each month for the entire trial period.
looks = c(107, 214), # number of patients accrued at each look time, nmax = 214.
perpetual=FALSE, # not a perpetual trial.
resprate =  c(0.5, 0.6), # response rate for each arm
lmb.conf.thres=0.95, # treatment arm is futility is the confidence in LMB is greater than 0.95
special = paste0(0.5, '_', 0.6) # passing the response rates to special to add to the output
)
# run a single simulation with these settings
conf <- runSingleTrial(input=inputs, save.plot=FALSE, print=FALSE, save.text = FALSE)
testthat::expect_equal(length(res), 17)
devtools::test()
devtools::check()
usethis::use_package("dplyr", min_version = T)
usethis::use_package("pbapply", min_version = T)
usethis::use_package("tidyverse", min_version = T)
usethis::use_package("tidyverse", min_version = T, type="depends")
y
library(confidenceSim)
devtool::test()
devtools::test()
devtools::check()
roxygen2::roxygenize()
