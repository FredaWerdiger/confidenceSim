do.call("getparlist", inputs)
devtools::document()
rm(list = c("getparlist"))
devtools::document()
ppm <- rep(15, 300)
getAccrual(1000, ppm, 0)
getBlockedArm(500, c(1:1))
getBlockedArm(500, c(1,1))
arm <- getBlockedArm(500, c(1,1))
devtools::document()
getDataBin(1, c(0.5, 0.7))
list(control = c(0.3, 0.5), treatment = (c(0.5,0.3))
)
getDataOrd(1, list(control = c(0.3, 0.5), treatment = (c(0.5,0.3))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.4), treatment = (c(0.5,0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.4), treatment = (c(0.5,0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.4), treatment = (c(0.5,0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.4), treatment = (c(0.5,0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.4), treatment = (c(0.5,0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.4), treatment = (c(0.5,0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.4), treatment = (c(0.5,0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.4), treatment = (c(0.5,0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.4), treatment = (c(0.5,0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.4), treatment = (c(0.5,0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.4), treatment = (c(0.5,0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.4), treatment = (c(0.5,0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.4), treatment = (c(0.5,0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.4), treatment = (c(0.5,0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.4), treatment = (c(0.5,0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.7), treatment = (c(0.5, 0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.7), treatment = (c(0.5, 0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.7), treatment = (c(0.5, 0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.7), treatment = (c(0.5, 0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.7), treatment = (c(0.5, 0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.7), treatment = (c(0.5, 0.3, 0.2))))
getDataOrd(1, list(control = c(0.3, 0.5, 0.7), treatment = (c(0.5, 0.3, 0.2))))
getDataCont(1, list(control = c(0,1), treatment = c(0.5,1)))
getDataCont(1, list(control = c(0,1), treatment = c(0.5,1)), dist='norm)
getDataCont(1, list(control = c(0,1), treatment = c(0.5,1)), dist='norm)
getDataCont(1, list(control = c(0,1), treatment = c(0.5,1)), dist='norm')
devtools::document()
devtools::document()
# two-arm six-stage trial (PRESTO-REACH) with binary outcome measure
parlist <- getparlist(
looks=seq(500,1000,100),
perpetual=FALSE,
alloc.ratio=c(1,1),
num.per.block=c(1,1),
final.visit=0,
as.type="asOF",
multiarm.mode="CONFIDENCE-BASED",
lmb.threshold=0.10,
lmb.conf.thresh=0.9,
outcome.type='BINARY',
estimator.type='odds ratio',
resprate=c(0.3,0.5),
ppm=rep(15, 300))
parlist
reproduce=FALSE
print=FALSE
directory=""
# get time of patient arrival, in terms of months since trial commence
arrival.month = getAccrual(
parlist$nmax, parlist$ppm,
follow.up=parlist$final.visit/30,
cont.recruit = FALSE,
perpetual = parlist$perpetual)
# convert month to day
arrival.day = arrival.month*365/12
nmax.followup = length(arrival.month)
# get nmax for each arm
# the arm will stop recruiting if it reaches the maximum number of interims
# OR if it reaches n.max.arm, whichever is first
nmax.arm = parlist$nmax/length(parlist$alloc.ratio)
# allocate patients to treatment arm
arm = getBlockedArm(nmax.followup, parlist$num.per.block)
## time when the outcome would be known (arrival plus follow up)
obstime = arrival.day + parlist$final.visit
# is this a perpetual trial?
perpetual = parlist$perpetual
# update the number of looks for a perpetual trial
if (perpetual){
# what is the difference in subjects between looks
diff = diff(parlist$looks)
# check that its same difference between looks
if (all(diff==diff)){
# extend number of looks to cover nmax.followup
parlist$num.looks = floor(nmax.followup/diff[1])
} else{
print("Interim length uneven, can't extend number of looks.")
}
}
# (binary/ordinal/continuous)
if (parlist$outcome.type=='ORDINAL'){
dat = vapply(arm, getDataOrd, resprate = parlist$resprate, FUN.VALUE = 0)
} else if (parlist$outcome.type=='BINARY'){
dat = vapply(arm, getDataBin, resprate = parlist$resprate, FUN.VALUE = 0)
} else if (parlist$outcome.type=='CONTINUOUS'){
dat = vapply(arm, getDataCont, resprate = parlist$resprate, FUN.VALUE = 0)
}
# make a list
datlist = list(subjid = 1:nmax.followup, arm = arm, dat = dat,
arrival.day = arrival.day, obstime = obstime)
datlist
save(datlist, file="data/datlist.RData")
save(datlist, file="data/datlist.RData")
typeof(datlist)
datlist$subjid
rownames(datlist)
datlist$dat
devtools::document()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
devtools::document()
head(datlist)
data(datlist)
head(datlist)
datlist <- data(datlist)
datlist
datlist
data(datlist)
looks <- seq(500,1000,100)
looks
looks[1]
datlist$arrival.day[n.at.look]
n.at.look = looks[1]
datlist$arrival.day[n.at.look]
looktime.interim = datlist$arrival.day[n.at.look]
currdalist.interim <- getCurrentData(datlist, looktime.interim, n.at.look, as.followup=TRUE)
currdalist.interim
devtools::document()
getSuffStats(datlist)
getSuffStats(currdatlist.interim)
currdatlist.interim <- getCurrentData(datlist, looktime.interim, n.at.look, as.followup=TRUE)
getSuffStats(currdatlist.interim)
looks
data(datlist)
looks <- seq(500,1000,100)
# first interim analysis
n.at.look = looks[1]
looktime.interim = datlist$arrival.day[n.at.look]
currdatlist.interim <- getCurrentData(datlist, looktime.interim, n.at.look, as.followup=TRUE)
suffStats  <- getSuffStats(currdatlist.interim)
suffStats
devtools::document()
devtools::document()
devtools::document()
devtools::document()
temp < - tempdir()
temp <- tempdir()
temp
resprate =  c(0.5, 0.6), # response rate for each arm
inputs <- list(
inputs <- list(
inputs <- list(
outcome.type = "BINARY", # binary outcome data
estimator.type = 'risk diff', # primary outcome is risk difference
lmb = 0.1, # risk difference < 0.1 lacks meaningful benefit
multiarm.mode='MONITOR FUTILITY', # only monitor for futility
alpha = 0.0125, # fixed alpha threshold to determine treatment efficacy
alloc.ratio = c(1,1), # allocation ratio
num.per.block = c(1,1), # number per block for blocked allocation
final.visit = 0, # time in days after which follow-up data becomes available
ppm = rep(25, 15), # patients accrued each month for the entire trial period.
looks = c(107, 214), # number of patients accrued at each look time, nmax = 214.
perpetual=FALSE, # not a perpetual trial.
resprate =  c(0.5, 0.6), # response rate for each arm
lmb.conf.thres=0.95, # treatment arm is futility is the confidence in LMB is greater than 0.95
special = paste0(0.5, '_', 0.6) # passing the response rates to special to add to the output
)
conf <- lapply(1:4, runSingleTrial, inputs=inputs,  save.plot=FALSE, print=FALSE, directory = '')
inputs <- list(
outcome.type = "BINARY", # binary outcome data
estimator.type = 'risk diff', # primary outcome is risk difference
lmb.threshold = 0.1, # risk difference < 0.1 lacks meaningful benefit
multiarm.mode='MONITOR FUTILITY', # only monitor for futility
alpha = 0.0125, # fixed alpha threshold to determine treatment efficacy
alloc.ratio = c(1,1), # allocation ratio
num.per.block = c(1,1), # number per block for blocked allocation
final.visit = 0, # time in days after which follow-up data becomes available
ppm = rep(25, 15), # patients accrued each month for the entire trial period.
looks = c(107, 214), # number of patients accrued at each look time, nmax = 214.
perpetual=FALSE, # not a perpetual trial.
resprate =  c(0.5, 0.6), # response rate for each arm
lmb.conf.thres=0.95, # treatment arm is futility is the confidence in LMB is greater than 0.95
special = paste0(0.5, '_', 0.6) # passing the response rates to special to add to the output
)
conf <- lapply(1:4, runSingleTrial, inputs=inputs,  save.plot=FALSE, print=FALSE, directory = '')
cl <- makeCluster(clusters)
library(parallel)
library(pbapply)
cluster <- 2
cl <- makeCluster(clusters)
# Now run in parallel across two nodes
clusters <- 2
cl <- makeCluster(clusters)
directory <- tempdir()
res.list <- pblapply(1:num.sims, runSingleTrial, inputs=inputs, save.plot=FALSE, directory=directory, cl=cl)
num.sims <- 4
res.list <- pblapply(1:num.sims, runSingleTrial, inputs=inputs, save.plot=FALSE, directory=directory, cl=cl)
library(confidenceSim)
inputs <- list(
outcome.type = "BINARY", # binary outcome data
estimator.type = 'risk diff', # primary outcome is risk difference
lmb.threshold = 0.1, # risk difference < 0.1 lacks meaningful benefit
multiarm.mode='MONITOR FUTILITY', # only monitor for futility
alpha = 0.0125, # fixed alpha threshold to determine treatment efficacy
alloc.ratio = c(1,1), # allocation ratio
num.per.block = c(1,1), # number per block for blocked allocation
final.visit = 0, # time in days after which follow-up data becomes available
ppm = rep(25, 15), # patients accrued each month for the entire trial period.
looks = c(107, 214), # number of patients accrued at each look time, nmax = 214.
perpetual=FALSE, # not a perpetual trial.
resprate =  c(0.5, 0.6), # response rate for each arm
lmb.conf.thres=0.95, # treatment arm is futility is the confidence in LMB is greater than 0.95
special = paste0(0.5, '_', 0.6) # passing the response rates to special to add to the output
)
num.sims <- 4
clusters <- 2
library(parallel)
library(pbapply)
cl <- makeCluster(clusters)
directory <- tempdir()
res.list <- pblapply(1:num.sims, runSingleTrial, inputs=inputs, save.plot=FALSE, directory=directory, cl=cl)
stopCluster(cl)
dirs = list.dirs(directory)
dirs
collectNodes(clusters, directory)
library(confidenceSim)
library(parallel)
library(pbapply)
inputs <- list(
outcome.type = "BINARY", # binary outcome data
estimator.type = 'risk diff', # primary outcome is risk difference
lmb.threshold = 0.1, # risk difference < 0.1 lacks meaningful benefit
multiarm.mode='MONITOR FUTILITY', # only monitor for futility
alpha = 0.0125, # fixed alpha threshold to determine treatment efficacy
alloc.ratio = c(1,1), # allocation ratio
num.per.block = c(1,1), # number per block for blocked allocation
final.visit = 0, # time in days after which follow-up data becomes available
ppm = rep(25, 15), # patients accrued each month for the entire trial period.
looks = c(107, 214), # number of patients accrued at each look time, nmax = 214.
perpetual=FALSE, # not a perpetual trial.
resprate =  c(0.5, 0.6), # response rate for each arm
lmb.conf.thres=0.95, # treatment arm is futility is the confidence in LMB is greater than 0.95
special = paste0(0.5, '_', 0.6) # passing the response rates to special to add to the output
)
num.sims <- 4
clusters <- 2
cl <- makeCluster(clusters)
directory <- tempdir()
res.list <- pblapply(1:num.sims, runSingleTrial, inputs=inputs, save.plot=FALSE, directory=directory, cl=cl)
stopCluster(cl)
collectNodes(clusters, directory)
collectNodes <- function(clusters, directory){
# exclude parent
dirs = list.dirs(directory)[-1]
# get the time stamp
times=lapply(dirs,function(x){
info = file.info(x)
t.str = strptime(info$ctime, "%Y-%m-%d %H:%M:%S")
floor(as.numeric(format(t.str, "%H")) +
as.numeric(format(t.str, "%M"))/60)
} )
# find which ones were created at the same time, in the cluster
dirs = dirs[which(times == unique(times)[unlist(lapply(unique(times), function(x) {
sum(times==x)==clusters
}))][[1]])]
# gather all csvs in dirs
csvs = unlist(lapply(dirs, function(x){dir(x, full.names=T, pattern=".csv+") }))
return(lapply(csvs, read.csv))
}
collectNodes(clusters, directory)
# exclude parent
dirs = list.dirs(directory)[-1]
dirs
# get the time stamp
times=lapply(dirs,function(x){
info = file.info(x)
t.str = strptime(info$ctime, "%Y-%m-%d %H:%M:%S")
floor(as.numeric(format(t.str, "%H")) +
as.numeric(format(t.str, "%M"))/60)
} )
times
dirs
times
# find which ones were created at the same time, in the cluster
dirs = dirs[which(times == unique(times)[unlist(lapply(unique(times), function(x) {
sum(times==x)==clusters
}))][[1]])]
dirs
lapply(dirs, basename)
lapply(basenames, is.digit)
lapply(basenames, as.numeric)
# get basenames
basenames = lapply(dirs, basenames)
# get basenames
basenames = lapply(dirs, basename)
lapply(basenames, as.numeric)
numbers = suppressWarnings(as.numeric, basenames)
numbers
numfiles = suppressWarnings(as.numeric, basenames)
numfiles
# get basenames
basenames = lapply(dirs, basename)
numfiles = suppressWarnings(as.numeric, basenames)
numfiles
suppressWarnings(as.numeric, basenames)
numfiles = suppressWarnings(lapply(as.numeric, basenames))
numfiles = suppressWarnings(lapply(as.numeric, basenames))
# get basenames
basenames = lapply(dirs, basename)
numfiles = suppressWarnings(lapply(as.numeric, basenames))
lapply(as.numeric, basenames)
basenames
lapply(as.numeric, basenames)
numfiles = suppressWarnings(lapply(basenames, as.numeric))
numfiles
is.na(numfiles)
1 - is.na(numfiles)
use.dirs = 1 - is.na(numfiles)
dirs[use.dirs]
collectNodes <- function(clusters, directory){
# exclude parent
dirs = list.dirs(directory)[-1]
# get basenames
basenames = lapply(dirs, basename)
# find basenames that are numeric only
numfiles = suppressWarnings(lapply(basenames, as.numeric))
use.dirs = 1 - is.na(numfiles)
# mask list of directories
dirs = dirs[use.dirs]
# get the time stamp
times=lapply(dirs,function(x){
info = file.info(x)
t.str = strptime(info$ctime, "%Y-%m-%d %H:%M:%S")
floor(as.numeric(format(t.str, "%H")) +
as.numeric(format(t.str, "%M"))/60)
} )
# find which ones were created at the same time, in the cluster
dirs = dirs[which(times == unique(times)[unlist(lapply(unique(times), function(x) {
sum(times==x)==clusters
}))][[1]])]
# gather all csvs in dirs
csvs = unlist(lapply(dirs, function(x){dir(x, full.names=T, pattern=".csv+") }))
return(lapply(csvs, read.csv))
}
collectNodes(clusters, directory)
res.list <- do.call("rbind", res.list)
res.list <- data.frame(res.list)
res.list
roxygen2::roxygenise()
devtools::document()
rm(list = c("collectNodes"))
devtools::document()
save(inputs, file="data/inputs.RData")
print(inputs)
data(inputs)
inputs <- list(
lmb.threshold = 1.10,
as.type = 'asOF',
outcome.type = "ORDINAL",
multiarm.mode='CONFIDENCE-BASED',
num.per.block = c(1,1),
final.visit = 180,
ppm = rep(20, 300),
perpetual=FALSE,
resprate=resprate,
looks=c(500,1000,1500)
)
inputs
parlist <- getparlist(
looks=seq(500,1000,100),
perpetual=FALSE,
alloc.ratio=c(1,1),
num.per.block=c(1,1),
final.visit=0,
as.type="asOF",
multiarm.mode="CONFIDENCE-BASED",
lmb.threshold=0.10,
lmb.conf.thresh=0.9,
outcome.type='BINARY',
estimator.type='odds ratio',
resprate=c(0.3,0.5),
ppm=rep(15, 300))
inputs <- list(
looks=seq(500,1000,100),
perpetual=FALSE,
alloc.ratio=c(1,1),
num.per.block=c(1,1),
final.visit=0,
as.type="asOF",
multiarm.mode="CONFIDENCE-BASED",
lmb.threshold=0.10,
lmb.conf.thresh=0.9,
outcome.type='BINARY',
estimator.type='odds ratio',
resprate=c(0.3,0.5),
ppm=rep(15, 300))
inputs
save(inputs, file="data/inputs.RData")
parlist <- getparlist(
looks=seq(500,1000,100),
perpetual=FALSE,
alloc.ratio=c(1,1),
num.per.block=c(1,1),
final.visit=0,
as.type="asOF",
multiarm.mode="CONFIDENCE-BASED",
lmb.threshold=0.10,
lmb.conf.thresh=0.9,
outcome.type='BINARY',
estimator.type='odds ratio',
resprate=c(0.3,0.5),
ppm=rep(15, 300))
roxygen2::roxygenise()
devtools::document()
data(inputs)
inputs
data(inputs)
num.sims <- 4
conf <- lapply(1:num.sims, runSingleTrial, inputs=inputs,  save.plot=FALSE, print=FALSE, directory = '')
clusters <- 2
cl <- makeCluster(clusters)
directory <- tempdir()
res.list <- pblapply(1:num.sims, runSingleTrial, inputs=inputs, save.plot=FALSE, directory=directory, cl=cl)
stopCluster(cl)
# now collect the results from the two nodes
collectNodes(clusters, directory)
clusters
# exclude parent
dirs = list.dirs(directory)[-1]
dirs
# get basenames
basenames = lapply(dirs, basename)
# find basenames that are numeric only
numfiles = suppressWarnings(lapply(basenames, as.numeric))
use.dirs = 1 - is.na(numfiles)
# mask list of directories
dirs = dirs[use.dirs]
dirs
# get the time stamp
times=lapply(dirs,function(x){
info = file.info(x)
t.str = strptime(info$ctime, "%Y-%m-%d %H:%M:%S")
floor(as.numeric(format(t.str, "%H")) +
as.numeric(format(t.str, "%M"))/60)
} )
times
x <- dirs[1]
x
info = file.info(x)
t.str = strptime(info$ctime, "%Y-%m-%d %H:%M:%S")
floor(as.numeric(format(t.str, "%H")) +
as.numeric(format(t.str, "%M"))/60)
t.str
as.numeric(format(t.str, "%H"))
as.numeric(format(t.str, "%M"))
floor(as.numeric(format(t.str, "%H")) +
as.numeric(format(t.str, "%M"))
usethis::use_vignette("running-simulations-in-parallel")
library(confidenceSim)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(confidenceSim)
usethis::use_testthat()
directory <- tempdir()
directory
res <- runSingleTrial(input=inputs, save.plot=FALSE, print=TRUE, directory = directory)
inputs
log(0.1)
log(1.1)
log(-0.95)
log(0.95)
inputs<- list(
#' looks=seq(500,1000,100),
#' perpetual=FALSE,
#' alloc.ratio=c(1,1),
#' num.per.block=c(1,1),
#' final.visit=0,
#' as.type="asOF",
#' multiarm.mode="CONFIDENCE-BASED",
#' lmb.threshold=0.95,
#' lmb.conf.thresh=0.9,
#' outcome.type='BINARY',
#' estimator.type='odds ratio',
#' resprate=c(0.3,0.5),
#' ppm=rep(15, 300))
inputs <- list(
looks=seq(500,1000,100),
perpetual=FALSE,
alloc.ratio=c(1,1),
num.per.block=c(1,1),
final.visit=0,
as.type="asOF",
multiarm.mode="CONFIDENCE-BASED",
lmb.threshold=0.95,
lmb.conf.thresh=0.9,
outcome.type='BINARY',
estimator.type='odds ratio',
resprate=c(0.3,0.5),
ppm=rep(15, 300))
save(inputs, file="data/inputs.RData")
roxygen2::roxygenise()
devtools::document()
data(inputs)
inputs
runSingleTrial(input=inputs, save.plot=FALSE, print=TRUE, directory = directory)
