library(confidenceSim)
library(confidenceSim)
library(confidenceSim)
library(confidenceSim)
#' to allow for parallel computing across multiple nodes. Random State is checkpointed throughout the code and saved in the subdirectory 'directory/<node>/'.
#' Results are saved in the same places as the Random States.
#' @param reproduce To reproduce a result from saved Random States. If setting as TRUE, make sure the directory parameter points to the location (the node subdirectory)
#' where the Random States are saved. The results will be saved to this directory. If set as FALSE (default), results and Random States are saved to the node subdirectory.
#' @param print. Whether to print out text (TRUE) or not (FALSE). Useful to observe the trial process and decision-making while the simulation is running.
#' Not recommended if running a high number of simulation.
#' @return description
#'
#' @examples
#'
inputs <- list(
lmb = 0.1,
outcome.type = "BINARY",
estimator.type = 'risk diff',
multiarm.mode='MONITOR FUTILITY',
alpha = 0.0125,
alloc.ratio = c(1,1),
num.per.block = c(1,1),
final.visit = 0,
ppm = rep(25, 15),
looks = c(107, 214),
perpetual=FALSE,
resprate =  c(0.5, 0.6),
lmb.conf.thres=0.95,
special = paste0(0.5, '_', 0.6)
)
conf <- runSingleTrial(input=inputs, save.plot=FALSE, print=TRUE, directory = '')
conf
typeof(conf)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
usethis::use_description()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
rlang::last_trace()
use_description()
usethis::use_description()
roxygen2::roxygenise()
roxygen2::roxygenise()
usethis::use_description()
library(usethis)
use_description(fields = list(Language = "es")
)
use_git_config(user.name = "FredaWerdiger", user.email = "fwerdiger@gmail.com")
git_sitrep()
use_git_config(user.name = "Freda Werdiger", user.email = "fwerdiger@gmail.com")
git_sitrep()
use_git_config(user.name = "FredaWerdiger", user.email = "fwerdiger@gmail.com")
options(
usethis.description = list(
"Authors@R" = utils::person(
"Freda", "Werdiger",
email = "freda.werdiger@unimelb.edu.au",
role = c("aut", "cre"),
comment = c(ORCID = "https://orcid.org/0000-0002-5535-7117")
)
),
usethis.overwrite = TRUE
)
usethis::edit_r_profile()
usethis::git_sitrep()
usethis::use_package("confidenceCurves").
usethis::use_package("confidenceCurves")
usethis::use_description()
usethis::use_mit_license()
usethis.description
usethis::usethis.description
usethis::use_description(
fields = list(
"Authors@R" = utils::person(
"Jane", "Doe",
email = "jane@example.com",
role = c("aut", "cre"),
comment = c(ORCID = "YOUR-ORCID-ID")
),
Language =  "es",
License = "MIT + file LICENSE"
),
)
usethis::use_description(
fields = list(
"Authors@R" = utils::person(
"Jane", "Doe",
email = "jane@example.com",
role = c("aut", "cre"),
comment = c(ORCID = "YOUR-ORCID-ID")
),
Language =  "es",
License = "MIT + file LICENSE"
)
)
usethis::use_description(
fields = list(
"Authors@R" = utils::person(
"Freda", "Werdiger",
email = "freda.werdiger@unimelb.edu.au",
role = c("aut", "cre"),
comment = c(ORCID = "https://orcid.org/0000-0002-5535-7117")
),
Language =  "es",
License = "MIT + file LICENSE"
)
)
usethis::use_description(
fields = list(
"Authors@R" = utils::person(
"Freda", "Werdiger",
email = "freda.werdiger@unimelb.edu.au",
role = c("aut", "cre"),
comment = c(ORCID = "0000-0002-5535-7117")
),
Language =  "es",
License = "MIT + file LICENSE"
)
)
usethis::use_description(
fields = list(
"Authors@R" = utils::person(
"Freda", "Werdiger",
email = "freda.werdiger@unimelb.edu.au",
role = c("aut", "cre"),
comment = c(ORCID = "0000-0002-5535-7117")
),
Language =  "es",
License = "MIT + file LICENSE",
Version = "0.1.0"
)
)
usethis::use_description(
fields = list(
"Authors@R" = utils::person(
"Freda", "Werdiger",
email = "freda.werdiger@unimelb.edu.au",
role = c("aut", "cre"),
comment = c(ORCID = "0000-0002-5535-7117")
),
Language =  "es",
License = "MIT + file LICENSE",
Version = "0.1.0",
Title = "Highly Customizable Simulations of Frequentist Confidence Clinical Trials"
)
)
usethis::use_description(
fields = list(
"Authors@R" = utils::person(
"Freda", "Werdiger",
email = "freda.werdiger@unimelb.edu.au",
role = c("aut", "cre"),
comment = c(ORCID = "0000-0002-5535-7117")
),
Language =  "es",
License = "MIT + file LICENSE",
Version = "0.1.0",
Title = "Highly Customizable, Parallelized Simulations of Frequentist Confidence Clinical Trials",
Description = "Simulate one or many frequentist confidence clinical trials based on a specified set of parameters."
)
)
usethis::use_description(
fields = list(
"Authors@R" = utils::person(
"Freda", "Werdiger",
email = "freda.werdiger@unimelb.edu.au",
role = c("aut", "cre"),
comment = c(ORCID = "0000-0002-5535-7117")
),
Language =  "es",
License = "MIT + file LICENSE",
Version = "0.1.0",
Title = "Highly Customizable, Parallelized Simulations of Frequentist Confidence Clinical Trials",
Description = "Simulate one or many frequentist confidence clinical trials based on a specified set of parameters.
From a two arm, single stage trial to a perpetually run adaptive trial, this package offers vast flexibility to customize your trial and observe operational characterisitics over thousands of instances."
)
)
usethis::use_description(
fields = list(
"Authors@R" = utils::person(
"Freda", "Werdiger",
email = "freda.werdiger@unimelb.edu.au",
role = c("aut", "cre"),
comment = c(ORCID = "0000-0002-5535-7117")
),
Language =  "es",
License = "MIT + file LICENSE",
Version = "0.1.0",
Title = "Highly Customizable, Parallelized Simulations of Frequentist Confidence Clinical Trials",
Description = "Simulate one or many frequentist confidence clinical trials based on a specified set of parameters.
From a two-arm, single-stage trial to a perpetually run Adaptive Platform Trial, this package offers vast flexibility to customize your trial and observe operational characterisitics over thousands of instances."
)
)
usethis::use_description(
fields = list(
"Authors@R" = utils::person(
"Freda", "Werdiger",
email = "freda.werdiger@unimelb.edu.au",
role = c("aut", "cre"),
comment = c(ORCID = "0000-0002-5535-7117")
),
Language =  "es",
License = "MIT + file LICENSE",
Version = "0.1.0",
Title = "Highly Customizable, Parallelized Simulations of Frequentist Confidence Clinical Trials",
Description = "Simulate one or many frequentist confidence clinical trials based on a specified set of parameters.
From a two-arm, single-stage trial to a perpetually run Adaptive Platform Trial, this package offers vast flexibility to customize your trial and observe operational characterisitics over thousands of instances."
)
)
use_package(confidenceCurves, type = "Imports", min_version = NULL)
use_package('confidenceCurves', type = "Imports", min_version = NULL)
usethis::use_package('confidenceCurves', type = "Imports", min_version = NULL)
usethis::use_package("confidenceCurves")
usethis::use_package("rpact")
usethis::use_package("MAMS")
usethis::use_package("genodds")
usethis::use_package("genodds", min_version = TRUE)
usethis::use_package("MAMS", min_version = T)
usethis::use_package("rpact", min_version = T)
usethis::use_package("confidenceCurves", min_version = T)
usethis::use_package("confidenceCurves", min_version = 0.2.0)
usethis::use_package("confidenceCurves", min_version =' 0.2.0')
usethis::use_package("confidenceCurves", min_version ='0.2.0')
use_package("R", type = "Depends", min_version = T)
usethis::use_package("R", type = "Depends", min_version = T)
devtools::document()
seq(500,1000,100)
getGSDesign(info.rates =c(0.5, 1))
design <- getGSDesign(info.rates =c(0.5, 1))
design$stageLevels
seq(500,1000,100)
getGSDesign(info.rates = c(0.5, 1), as.type = 'asP')
devtools::document()
design
design$stageLevels
design$alphaSpent
design <- getGSDesign(looks = seq(500, 1000, 100))
design$alphaSpent
design$stageLevels
design$criticalValues
getConfidenceFromBounds(getGSDesign(looks=seq(500, 1000, 100)))
devtools::document()
devtools::document()
getBoundsFromConfidence()
p.upper = (1 - conf.upper)*2
#' @param num.treat.arms
#' @param conf.lower
#' @param conf.upper
#' @param dir.benefit
#' @param p.sided
#'
#' @return
#' @export
#'
#' @examples
getBoundsFromConfidence <- function(num.treat.arms=2,
conf.lower=0.01,
conf.upper=0.99,
dir.benefit=0,
p.sided=1
){
# num.treat.arms: number of treatment arms excluding the control
# dir.benefit: direction of treatment benefit for log odds; 0: < 0 and 1: >0.
# conf.lower/conf.upper: stopping boundaries for inferiority and superiority
# p.sided: one or two sided test for interim. Final analysis p-value is by default 2 sided
# as per ACT-GLOBAL if there are more than three treatment arms, the threshold is lower for each
if(num.treat.arms <=2){
conf.lower = conf.lower
} else if (num.treat.arms >2){
conf.lower = conf.lower/2
}
critical.value.upper = qnorm(conf.upper)
critical.value.lower = qnorm(conf.lower)
if(p.sided == 1){
p.value = 'one-tailed'
p.upper = 1 - conf.upper
p.lower = conf.lower
} else if(p.sided == 2){
p.value = 'two-tailed'
p.upper = (1 - conf.upper)*2
p.lower = conf.lower * 2
}
bounds = list(confidence.lower=conf.lower, z.score.lower=critical.value.lower,
p.value.lower=p.lower, confidence.upper=conf.upper, z.score.upper=critical.value.upper,
p.value.upper=p.upper, p.value=p.value)
return(bounds)
}
getBoundsFromConfidence()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
rm(list = c("getBoundsFromConfidence"))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
